<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on Percona Community</title><link>https://percona.community/labs/serverless-postgresql/docs/</link><description>Recent content in Documentation on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><atom:link href="https://percona.community/labs/serverless-postgresql/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://percona.community/labs/serverless-postgresql/docs/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://percona.community/labs/serverless-postgresql/docs/introduction/</guid><description>Percona provides binary builds for Serverless PostgreSQL based on the Neon: Serverless Postgres.
This solution provides a serverless experience for PostgreSQL by separating the compute nodes and storage nodes. This allows scaling your storage as your data grows and makes the process transparent for end users.
At this point, the builds are EXPERIMENTAL and for TESTING PURPOSES ONLY. Percona does not provide official support for the builds at the moment.</description></item><item><title>Installation</title><link>https://percona.community/labs/serverless-postgresql/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://percona.community/labs/serverless-postgresql/docs/installation/</guid><description>Right now we have tar.gz packages
neondatabase-neon-PG14-1.0.0-Linux-x86_64.glibc2.31.tar.gz neondatabase-neon-PG14-1.0.0-Linux-x86_64.glibc2.35.tar.gz neondatabase-neon-PG15-1.0.0-Linux-x86_64.glibc2.31.tar.gz neondatabase-neon-PG15-1.0.0-Linux-x86_64.glibc2.35.tar.gz We ship packages either with PostgreSQL 14 or PostgreSQL 15 and for systems with glibc2.31 (Ubuntu 20.04) or glibc2.35
The packages contain all binaries to start and evaluate the deployment.
Resource planning Given the distributed nature of the deployment, we need separate systems (either bare metal, virtual images, or cloud instances) for the following components:
Storage broker Page server Safekeeper (3 instances) Compute nodes Some components can be hosted together, and for testing purposes, you can use only a single safekeeper, so all components can be hosted on the same single server.</description></item></channel></rss>